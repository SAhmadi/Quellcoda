import Vue from 'vue';
import Vuex from 'vuex';

Vue.use(Vuex);

export default new Vuex.Store({
  state: {
    activeNode: {},
    activeNodeId: 1,
    activeModel: {},
    fileTreeChildren: [],
    models: [],
  },
  mutations: {
    mutateActiveNode(state, activeNode) {
      //state.activeNode = { ...state.activeNode, activeNode };
      state.activeNode = activeNode;
    },
    mutateActiveNodeId(state, activeNodeId) {
      state.activeNodeId = activeNodeId;
    },
    mutateActiveModel(state, activeModel) {
      state.activeModel = { ...state.activeModel, activeModel };
    },
    mutateFileTreeChildren(state, fileTreeChildren) {
      Vue.set(state, 'fileTreeChildren', [...fileTreeChildren]);
    },
    mutateModels(state, newModels) {
      //Vue.set(state, 'models', [...newModels]);
      state.models = [...newModels];
    },
  },
  actions: {
    updateActiveNode({ commit }, activeNode) {
      commit('mutateActiveNode', activeNode);
      commit('mutateActiveNodeId', activeNode.id);
      commit('mutateActiveModel', activeNode.model);
    },
    updateActiveNodeId({ commit }, activeNodeId) {
      commit('mutateActiveNodeId', activeNodeId);
    },
    updateActiveModel({ commit }, activeModel) {
      commit('mutateActiveModel', activeModel);
    },
    updateFileTree({ commit }, fileTreeChildren) {
      commit('mutateFileTree', fileTreeChildren);
    },
    updateModels({ commit }, newModels) {
      commit('mutateModels', newModels);
    }
  },
  getters: {
    activeNode: state => state.activeNode,
    activeNodeId: state => state.activeNodeId, // state.activeNodeId,
    activeModel: state => state.activeModel, // state.activeModel,
    fileTreeChildren: state => state.fileTreeChildren,
    models: state => state.models,
  },
  modules: {},
});
